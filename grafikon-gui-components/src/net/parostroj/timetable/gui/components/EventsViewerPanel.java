package net.parostroj.timetable.gui.components;

import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractListModel;

/**
 * Events' viewer panel.
 *
 * @author jub
 */
public class EventsViewerPanel extends javax.swing.JPanel {

    private Map<Class<?>, EventsViewerTypeConverter> converterMap;

    class EventListModel extends AbstractListModel {

        private List<Object> eventList = new ArrayList<Object>();

        public void addEvent(Object event) {
            eventList.add(event);
            int position = eventList.size() - 1;
            fireIntervalAdded(this, position, position);
        }

        @Override
        public int getSize() {
            return eventList.size();
        }

        @Override
        public Object getElementAt(int index) {
            Object object = eventList.get(index);
            EventsViewerTypeConverter converter = getConverterForType(object.getClass());
            return converter != null ? converter.getListString(object) : object.toString();
        }


    }

    /** Creates new form EventsViewerPanel */
    public EventsViewerPanel() {
        initComponents();
        converterMap = new HashMap<Class<?>, EventsViewerTypeConverter>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        scrollPane1 = new javax.swing.JScrollPane();
        eventsList = new javax.swing.JList();
        scrollPane2 = new javax.swing.JScrollPane();
        eventTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        eventsList.setModel(new EventListModel());
        eventsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane1.setViewportView(eventsList);

        splitPane.setLeftComponent(scrollPane1);

        eventTextArea.setColumns(20);
        eventTextArea.setRows(5);
        scrollPane2.setViewportView(eventTextArea);

        splitPane.setRightComponent(scrollPane2);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea eventTextArea;
    private javax.swing.JList eventsList;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables

    public void setDividerLocation(int value) {
        splitPane.setDividerLocation(value);
    }

    public int getDividerLocation() {
        return splitPane.getDividerLocation();
    }

    public void addEvent(Object event) {
        getEventsModel().addEvent(event);
        scrollToPosition(getEventsModel().getSize() - 1);
    }

    private void scrollToPosition(int position) {
        Rectangle cellBounds = eventsList.getCellBounds(position, position);
        eventsList.scrollRectToVisible(cellBounds);
    }

    public void clearEvents() {
        eventsList.setModel(new EventListModel());
    }

    private EventListModel getEventsModel() {
        return (EventListModel)eventsList.getModel();
    }

    public void addConverter(EventsViewerTypeConverter converter) {
        converterMap.put(converter.getEventClass(), converter);
    }

    public void removeConverter(Class<?> clazz) {
        converterMap.remove(clazz);
    }

    private EventsViewerTypeConverter getConverterForType(Class<?> clazz) {
        while (clazz != null) {
            EventsViewerTypeConverter converter = converterMap.get(clazz);
            if (converter != null) {
                return converter;
            } else {
                clazz = clazz.getSuperclass();
            }
        }
        return null;
    }
}
